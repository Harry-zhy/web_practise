{"version":3,"file":"src_main_webapp_app_admin_metrics_metrics_module_ts.js","mappings":"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","sources":["./src/main/webapp/app/admin/metrics/blocks/jvm-memory/jvm-memory.component.ts","./src/main/webapp/app/admin/metrics/blocks/jvm-memory/jvm-memory.component.html","./src/main/webapp/app/admin/metrics/blocks/jvm-threads/jvm-threads.component.ts","./src/main/webapp/app/admin/metrics/blocks/jvm-threads/jvm-threads.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-cache/metrics-cache.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-cache/metrics-cache.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-datasource/metrics-datasource.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-datasource/metrics-datasource.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-endpoints-requests/metrics-endpoints-requests.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-endpoints-requests/metrics-endpoints-requests.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-garbagecollector/metrics-garbagecollector.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-garbagecollector/metrics-garbagecollector.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-modal-threads/metrics-modal-threads.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-modal-threads/metrics-modal-threads.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-request/metrics-request.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-request/metrics-request.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-system/metrics-system.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-system/metrics-system.component.html","./src/main/webapp/app/admin/metrics/metrics.component.ts","./src/main/webapp/app/admin/metrics/metrics.component.html","./src/main/webapp/app/admin/metrics/metrics.model.ts","./src/main/webapp/app/admin/metrics/metrics.module.ts","./src/main/webapp/app/admin/metrics/metrics.route.ts","./src/main/webapp/app/admin/metrics/metrics.service.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\r\n\r\nimport { JvmMetrics } from 'app/admin/metrics/metrics.model';\r\n\r\n@Component({\r\n  selector: 'jhi-jvm-memory',\r\n  templateUrl: './jvm-memory.component.html',\r\n})\r\nexport class JvmMemoryComponent {\r\n  /**\r\n   * object containing all jvm memory metrics\r\n   */\r\n  @Input() jvmMemoryMetrics?: { [key: string]: JvmMetrics };\r\n\r\n  /**\r\n   * boolean field saying if the metrics are in the process of being updated\r\n   */\r\n  @Input() updating?: boolean;\r\n}\r\n","<h4>Memory</h4>\r\n\r\n<div *ngIf=\"!updating && jvmMemoryMetrics\">\r\n  <div *ngFor=\"let entry of jvmMemoryMetrics | keyvalue\">\r\n    <span *ngIf=\"entry.value.max !== -1; else other\">\r\n      <span>{{ entry.key }}</span>\r\n      ({{ entry.value.used / 1048576 | number: '1.0-0' }}M / {{ entry.value.max / 1048576 | number: '1.0-0' }}M)\r\n    </span>\r\n\r\n    <div>Committed : {{ entry.value.committed / 1048576 | number: '1.0-0' }}M</div>\r\n\r\n    <ng-template #other\r\n      ><span\r\n        ><span>{{ entry.key }}</span> {{ entry.value.used / 1048576 | number: '1.0-0' }}M</span\r\n      ></ng-template\r\n    >\r\n\r\n    <ngb-progressbar\r\n      *ngIf=\"entry.value.max !== -1\"\r\n      type=\"success\"\r\n      [value]=\"(100 * entry.value.used) / entry.value.max\"\r\n      [striped]=\"true\"\r\n      [animated]=\"false\"\r\n    >\r\n      <span>{{ (entry.value.used * 100) / entry.value.max | number: '1.0-0' }}%</span>\r\n    </ngb-progressbar>\r\n  </div>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { Thread, ThreadState } from 'app/admin/metrics/metrics.model';\r\nimport { MetricsModalThreadsComponent } from '../metrics-modal-threads/metrics-modal-threads.component';\r\n\r\n@Component({\r\n  selector: 'jhi-jvm-threads',\r\n  templateUrl: './jvm-threads.component.html',\r\n})\r\nexport class JvmThreadsComponent {\r\n  threadStats = {\r\n    threadDumpAll: 0,\r\n    threadDumpRunnable: 0,\r\n    threadDumpTimedWaiting: 0,\r\n    threadDumpWaiting: 0,\r\n    threadDumpBlocked: 0,\r\n  };\r\n\r\n  @Input()\r\n  set threads(threads: Thread[] | undefined) {\r\n    this._threads = threads;\r\n\r\n    threads?.forEach(thread => {\r\n      if (thread.threadState === ThreadState.Runnable) {\r\n        this.threadStats.threadDumpRunnable += 1;\r\n      } else if (thread.threadState === ThreadState.Waiting) {\r\n        this.threadStats.threadDumpWaiting += 1;\r\n      } else if (thread.threadState === ThreadState.TimedWaiting) {\r\n        this.threadStats.threadDumpTimedWaiting += 1;\r\n      } else if (thread.threadState === ThreadState.Blocked) {\r\n        this.threadStats.threadDumpBlocked += 1;\r\n      }\r\n    });\r\n\r\n    this.threadStats.threadDumpAll =\r\n      this.threadStats.threadDumpRunnable +\r\n      this.threadStats.threadDumpWaiting +\r\n      this.threadStats.threadDumpTimedWaiting +\r\n      this.threadStats.threadDumpBlocked;\r\n  }\r\n\r\n  get threads(): Thread[] | undefined {\r\n    return this._threads;\r\n  }\r\n\r\n  private _threads: Thread[] | undefined;\r\n\r\n  constructor(private modalService: NgbModal) {}\r\n\r\n  open(): void {\r\n    const modalRef = this.modalService.open(MetricsModalThreadsComponent);\r\n    modalRef.componentInstance.threads = this.threads;\r\n  }\r\n}\r\n","<h4>Threads</h4>\r\n\r\n<span><span>Runnable</span> {{ threadStats.threadDumpRunnable }}</span>\r\n\r\n<ngb-progressbar\r\n  [value]=\"threadStats.threadDumpRunnable\"\r\n  [max]=\"threadStats.threadDumpAll\"\r\n  [striped]=\"true\"\r\n  [animated]=\"false\"\r\n  type=\"success\"\r\n>\r\n  <span>{{ (threadStats.threadDumpRunnable * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\r\n</ngb-progressbar>\r\n\r\n<span><span>Timed waiting</span> ({{ threadStats.threadDumpTimedWaiting }})</span>\r\n\r\n<ngb-progressbar\r\n  [value]=\"threadStats.threadDumpTimedWaiting\"\r\n  [max]=\"threadStats.threadDumpAll\"\r\n  [striped]=\"true\"\r\n  [animated]=\"false\"\r\n  type=\"warning\"\r\n>\r\n  <span>{{ (threadStats.threadDumpTimedWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\r\n</ngb-progressbar>\r\n\r\n<span><span>Waiting</span> ({{ threadStats.threadDumpWaiting }})</span>\r\n\r\n<ngb-progressbar\r\n  [value]=\"threadStats.threadDumpWaiting\"\r\n  [max]=\"threadStats.threadDumpAll\"\r\n  [striped]=\"true\"\r\n  [animated]=\"false\"\r\n  type=\"warning\"\r\n>\r\n  <span>{{ (threadStats.threadDumpWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\r\n</ngb-progressbar>\r\n\r\n<span><span>Blocked</span> ({{ threadStats.threadDumpBlocked }})</span>\r\n\r\n<ngb-progressbar\r\n  [value]=\"threadStats.threadDumpBlocked\"\r\n  [max]=\"threadStats.threadDumpAll\"\r\n  [striped]=\"true\"\r\n  [animated]=\"false\"\r\n  type=\"success\"\r\n>\r\n  <span>{{ (threadStats.threadDumpBlocked * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\r\n</ngb-progressbar>\r\n\r\n<div>Total: {{ threadStats.threadDumpAll }}</div>\r\n\r\n<button class=\"hand btn btn-primary btn-sm\" (click)=\"open()\" data-toggle=\"modal\" data-target=\"#threadDump\">\r\n  <span>Expand</span>\r\n</button>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport { CacheMetrics } from 'app/admin/metrics/metrics.model';\r\nimport { filterNaN } from 'app/core/util/operators';\r\n\r\n@Component({\r\n  selector: 'jhi-metrics-cache',\r\n  templateUrl: './metrics-cache.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MetricsCacheComponent {\r\n  /**\r\n   * object containing all cache related metrics\r\n   */\r\n  @Input() cacheMetrics?: { [key: string]: CacheMetrics };\r\n\r\n  /**\r\n   * boolean field saying if the metrics are in the process of being updated\r\n   */\r\n  @Input() updating?: boolean;\r\n\r\n  filterNaN = (input: number): number => filterNaN(input);\r\n}\r\n","<h3 id=\"cacheMetrics\">Cache statistics</h3>\r\n\r\n<div class=\"table-responsive\" *ngIf=\"!updating && cacheMetrics\">\r\n  <table class=\"table table-striped\" aria-describedby=\"cacheMetrics\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">Cache name</th>\r\n        <th scope=\"col\" class=\"text-end\">Cache Hits</th>\r\n        <th scope=\"col\" class=\"text-end\">Cache Misses</th>\r\n        <th scope=\"col\" class=\"text-end\">Cache Gets</th>\r\n        <th scope=\"col\" class=\"text-end\">Cache Puts</th>\r\n        <th scope=\"col\" class=\"text-end\">Cache Removals</th>\r\n        <th scope=\"col\" class=\"text-end\">Cache Evictions</th>\r\n        <th scope=\"col\" class=\"text-end\">Cache Hit %</th>\r\n        <th scope=\"col\" class=\"text-end\">Cache Miss %</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr *ngFor=\"let entry of cacheMetrics | keyvalue\">\r\n        <td>{{ entry.key }}</td>\r\n        <td class=\"text-end\">{{ entry.value['cache.gets.hit'] }}</td>\r\n        <td class=\"text-end\">{{ entry.value['cache.gets.miss'] }}</td>\r\n        <td class=\"text-end\">{{ entry.value['cache.gets.hit'] + entry.value['cache.gets.miss'] }}</td>\r\n        <td class=\"text-end\">{{ entry.value['cache.puts'] }}</td>\r\n        <td class=\"text-end\">{{ entry.value['cache.removals'] }}</td>\r\n        <td class=\"text-end\">{{ entry.value['cache.evictions'] }}</td>\r\n        <td class=\"text-end\">\r\n          {{\r\n            filterNaN((100 * entry.value['cache.gets.hit']) / (entry.value['cache.gets.hit'] + entry.value['cache.gets.miss']))\r\n              | number: '1.0-4'\r\n          }}\r\n        </td>\r\n        <td class=\"text-end\">\r\n          {{\r\n            filterNaN((100 * entry.value['cache.gets.miss']) / (entry.value['cache.gets.hit'] + entry.value['cache.gets.miss']))\r\n              | number: '1.0-4'\r\n          }}\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport { Databases } from 'app/admin/metrics/metrics.model';\r\nimport { filterNaN } from 'app/core/util/operators';\r\n\r\n@Component({\r\n  selector: 'jhi-metrics-datasource',\r\n  templateUrl: './metrics-datasource.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MetricsDatasourceComponent {\r\n  /**\r\n   * object containing all datasource related metrics\r\n   */\r\n  @Input() datasourceMetrics?: Databases;\r\n\r\n  /**\r\n   * boolean field saying if the metrics are in the process of being updated\r\n   */\r\n  @Input() updating?: boolean;\r\n\r\n  filterNaN = (input: number): number => filterNaN(input);\r\n}\r\n","<h3 id=\"datasourceMetrics\">DataSource statistics (time in millisecond)</h3>\r\n\r\n<div class=\"table-responsive\" *ngIf=\"!updating && datasourceMetrics\">\r\n  <table class=\"table table-striped\" aria-describedby=\"datasourceMetrics\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">\r\n          <span>Connection Pool Usage</span> (active: {{ datasourceMetrics.active.value }}, min: {{ datasourceMetrics.min.value }}, max:\r\n          {{ datasourceMetrics.max.value }}, idle: {{ datasourceMetrics.idle.value }})\r\n        </th>\r\n        <th scope=\"col\" class=\"text-end\">Count</th>\r\n        <th scope=\"col\" class=\"text-end\">Mean</th>\r\n        <th scope=\"col\" class=\"text-end\">Min</th>\r\n        <th scope=\"col\" class=\"text-end\">p50</th>\r\n        <th scope=\"col\" class=\"text-end\">p75</th>\r\n        <th scope=\"col\" class=\"text-end\">p95</th>\r\n        <th scope=\"col\" class=\"text-end\">p99</th>\r\n        <th scope=\"col\" class=\"text-end\">Max</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>Acquire</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.acquire.count }}</td>\r\n        <td class=\"text-end\">{{ filterNaN(datasourceMetrics.acquire.mean) | number: '1.0-2' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.acquire['0.0'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.acquire['0.5'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.acquire['0.75'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.acquire['0.95'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.acquire['0.99'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ filterNaN(datasourceMetrics.acquire.max) | number: '1.0-2' }}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Creation</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.creation.count }}</td>\r\n        <td class=\"text-end\">{{ filterNaN(datasourceMetrics.creation.mean) | number: '1.0-2' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.creation['0.0'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.creation['0.5'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.creation['0.75'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.creation['0.95'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.creation['0.99'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ filterNaN(datasourceMetrics.creation.max) | number: '1.0-2' }}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>Usage</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.usage.count }}</td>\r\n        <td class=\"text-end\">{{ filterNaN(datasourceMetrics.usage.mean) | number: '1.0-2' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.usage['0.0'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.usage['0.5'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.usage['0.75'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.usage['0.95'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ datasourceMetrics.usage['0.99'] | number: '1.0-3' }}</td>\r\n        <td class=\"text-end\">{{ filterNaN(datasourceMetrics.usage.max) | number: '1.0-2' }}</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { Services } from 'app/admin/metrics/metrics.model';\r\n\r\n@Component({\r\n  selector: 'jhi-metrics-endpoints-requests',\r\n  templateUrl: './metrics-endpoints-requests.component.html',\r\n})\r\nexport class MetricsEndpointsRequestsComponent {\r\n  /**\r\n   * object containing service related metrics\r\n   */\r\n  @Input() endpointsRequestsMetrics?: Services;\r\n\r\n  /**\r\n   * boolean field saying if the metrics are in the process of being updated\r\n   */\r\n  @Input() updating?: boolean;\r\n}\r\n","<h3 id=\"endpointsRequestsMetrics\">Endpoints requests (time in millisecond)</h3>\r\n\r\n<div class=\"table-responsive\" *ngIf=\"!updating && endpointsRequestsMetrics\">\r\n  <table class=\"table table-striped\" aria-describedby=\"endpointsRequestsMetrics\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">Method</th>\r\n        <th scope=\"col\">Endpoint url</th>\r\n        <th scope=\"col\" class=\"text-end\">Count</th>\r\n        <th scope=\"col\" class=\"text-end\">Mean</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <ng-container *ngFor=\"let entry of endpointsRequestsMetrics | keyvalue\">\r\n        <tr *ngFor=\"let method of entry.value | keyvalue\">\r\n          <td>{{ method.key }}</td>\r\n          <td>{{ entry.key }}</td>\r\n          <td class=\"text-end\">{{ method.value!.count }}</td>\r\n          <td class=\"text-end\">{{ method.value!.mean | number: '1.0-3' }}</td>\r\n        </tr>\r\n      </ng-container>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\n\r\nimport { GarbageCollector } from 'app/admin/metrics/metrics.model';\r\n\r\n@Component({\r\n  selector: 'jhi-metrics-garbagecollector',\r\n  templateUrl: './metrics-garbagecollector.component.html',\r\n})\r\nexport class MetricsGarbageCollectorComponent {\r\n  /**\r\n   * object containing garbage collector related metrics\r\n   */\r\n  @Input() garbageCollectorMetrics?: GarbageCollector;\r\n\r\n  /**\r\n   * boolean field saying if the metrics are in the process of being updated\r\n   */\r\n  @Input() updating?: boolean;\r\n}\r\n","<h3 id=\"garbageCollectorMetrics\">Garbage collections</h3>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-md-4\">\r\n    <div *ngIf=\"garbageCollectorMetrics\">\r\n      <span>\r\n        GC Live Data Size/GC Max Data Size ({{ garbageCollectorMetrics['jvm.gc.live.data.size'] / 1048576 | number: '1.0-0' }}M /\r\n        {{ garbageCollectorMetrics['jvm.gc.max.data.size'] / 1048576 | number: '1.0-0' }}M)\r\n      </span>\r\n\r\n      <ngb-progressbar\r\n        [max]=\"garbageCollectorMetrics['jvm.gc.max.data.size']\"\r\n        [value]=\"garbageCollectorMetrics['jvm.gc.live.data.size']\"\r\n        [striped]=\"true\"\r\n        [animated]=\"false\"\r\n        type=\"success\"\r\n      >\r\n        <span>\r\n          {{\r\n            (100 * garbageCollectorMetrics['jvm.gc.live.data.size']) / garbageCollectorMetrics['jvm.gc.max.data.size'] | number: '1.0-2'\r\n          }}%\r\n        </span>\r\n      </ngb-progressbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"col-md-4\">\r\n    <div *ngIf=\"garbageCollectorMetrics\">\r\n      <span>\r\n        GC Memory Promoted/GC Memory Allocated ({{ garbageCollectorMetrics['jvm.gc.memory.promoted'] / 1048576 | number: '1.0-0' }}M /\r\n        {{ garbageCollectorMetrics['jvm.gc.memory.allocated'] / 1048576 | number: '1.0-0' }}M)\r\n      </span>\r\n\r\n      <ngb-progressbar\r\n        [max]=\"garbageCollectorMetrics['jvm.gc.memory.allocated']\"\r\n        [value]=\"garbageCollectorMetrics['jvm.gc.memory.promoted']\"\r\n        [striped]=\"true\"\r\n        [animated]=\"false\"\r\n        type=\"success\"\r\n      >\r\n        <span>\r\n          {{\r\n            (100 * garbageCollectorMetrics['jvm.gc.memory.promoted']) / garbageCollectorMetrics['jvm.gc.memory.allocated']\r\n              | number: '1.0-2'\r\n          }}%\r\n        </span>\r\n      </ngb-progressbar>\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"garbageCollectorMetrics\" class=\"col-md-4\">\r\n    <div class=\"row\" *ngIf=\"garbageCollectorMetrics\">\r\n      <div class=\"col-md-9\">Classes loaded</div>\r\n      <div class=\"col-md-3 text-end\">{{ garbageCollectorMetrics.classesLoaded }}</div>\r\n    </div>\r\n    <div class=\"row\" *ngIf=\"garbageCollectorMetrics\">\r\n      <div class=\"col-md-9\">Classes unloaded</div>\r\n      <div class=\"col-md-3 text-end\">{{ garbageCollectorMetrics.classesUnloaded }}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"table-responsive\" *ngIf=\"!updating && garbageCollectorMetrics\">\r\n    <table class=\"table table-striped\" aria-describedby=\"garbageCollectorMetrics\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\"></th>\r\n          <th scope=\"col\" class=\"text-end\">Count</th>\r\n          <th scope=\"col\" class=\"text-end\">Mean</th>\r\n          <th scope=\"col\" class=\"text-end\">Min</th>\r\n          <th scope=\"col\" class=\"text-end\">p50</th>\r\n          <th scope=\"col\" class=\"text-end\">p75</th>\r\n          <th scope=\"col\" class=\"text-end\">p95</th>\r\n          <th scope=\"col\" class=\"text-end\">p99</th>\r\n          <th scope=\"col\" class=\"text-end\">Max</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>jvm.gc.pause</td>\r\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause'].count }}</td>\r\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause'].mean | number: '1.0-3' }}</td>\r\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.0'] | number: '1.0-3' }}</td>\r\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.5'] | number: '1.0-3' }}</td>\r\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.75'] | number: '1.0-3' }}</td>\r\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.95'] | number: '1.0-3' }}</td>\r\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.99'] | number: '1.0-3' }}</td>\r\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause'].max | number: '1.0-3' }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { Thread, ThreadState } from 'app/admin/metrics/metrics.model';\r\n\r\n@Component({\r\n  selector: 'jhi-thread-modal',\r\n  templateUrl: './metrics-modal-threads.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MetricsModalThreadsComponent implements OnInit {\r\n  ThreadState = ThreadState;\r\n  threadStateFilter?: ThreadState;\r\n  threads?: Thread[];\r\n  threadDumpAll = 0;\r\n  threadDumpBlocked = 0;\r\n  threadDumpRunnable = 0;\r\n  threadDumpTimedWaiting = 0;\r\n  threadDumpWaiting = 0;\r\n\r\n  constructor(private activeModal: NgbActiveModal) {}\r\n\r\n  ngOnInit(): void {\r\n    this.threads?.forEach(thread => {\r\n      if (thread.threadState === ThreadState.Runnable) {\r\n        this.threadDumpRunnable += 1;\r\n      } else if (thread.threadState === ThreadState.Waiting) {\r\n        this.threadDumpWaiting += 1;\r\n      } else if (thread.threadState === ThreadState.TimedWaiting) {\r\n        this.threadDumpTimedWaiting += 1;\r\n      } else if (thread.threadState === ThreadState.Blocked) {\r\n        this.threadDumpBlocked += 1;\r\n      }\r\n    });\r\n\r\n    this.threadDumpAll = this.threadDumpRunnable + this.threadDumpWaiting + this.threadDumpTimedWaiting + this.threadDumpBlocked;\r\n  }\r\n\r\n  getBadgeClass(threadState: ThreadState): string {\r\n    if (threadState === ThreadState.Runnable) {\r\n      return 'bg-success';\r\n    } else if (threadState === ThreadState.Waiting) {\r\n      return 'bg-info';\r\n    } else if (threadState === ThreadState.TimedWaiting) {\r\n      return 'bg-warning';\r\n    } else if (threadState === ThreadState.Blocked) {\r\n      return 'bg-danger';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  getThreads(): Thread[] {\r\n    return this.threads?.filter(thread => !this.threadStateFilter || thread.threadState === this.threadStateFilter) ?? [];\r\n  }\r\n\r\n  dismiss(): void {\r\n    this.activeModal.dismiss();\r\n  }\r\n}\r\n","<div class=\"modal-header\">\r\n  <h4 class=\"modal-title\">Threads dump</h4>\r\n\r\n  <button type=\"button\" class=\"btn-close\" (click)=\"dismiss()\">&times;</button>\r\n</div>\r\n\r\n<div class=\"modal-body\">\r\n  <div class=\"mb-3\">\r\n    <span class=\"badge bg-primary hand\" (click)=\"threadStateFilter = undefined\">\r\n      <fa-icon *ngIf=\"threadStateFilter === undefined\" icon=\"check\"></fa-icon>\r\n      All&nbsp;<span class=\"badge rounded-pill bg-default\">{{ threadDumpAll }}</span>\r\n    </span>\r\n\r\n    <span class=\"badge bg-success hand\" (click)=\"threadStateFilter = ThreadState.Runnable\">\r\n      <fa-icon *ngIf=\"threadStateFilter === ThreadState.Runnable\" icon=\"check\"></fa-icon>\r\n      Runnable&nbsp;<span class=\"badge rounded-pill bg-default\">{{ threadDumpRunnable }}</span>\r\n    </span>\r\n\r\n    <span class=\"badge bg-info hand\" (click)=\"threadStateFilter = ThreadState.Waiting\">\r\n      <fa-icon *ngIf=\"threadStateFilter === ThreadState.Waiting\" icon=\"check\"></fa-icon>\r\n      Waiting&nbsp;<span class=\"badge rounded-pill bg-default\">{{ threadDumpWaiting }}</span>\r\n    </span>\r\n\r\n    <span class=\"badge bg-warning hand\" (click)=\"threadStateFilter = ThreadState.TimedWaiting\">\r\n      <fa-icon *ngIf=\"threadStateFilter === ThreadState.TimedWaiting\" icon=\"check\"></fa-icon>\r\n      Timed Waiting&nbsp;<span class=\"badge rounded-pill bg-default\">{{ threadDumpTimedWaiting }}</span>\r\n    </span>\r\n\r\n    <span class=\"badge bg-danger hand\" (click)=\"threadStateFilter = ThreadState.Blocked\">\r\n      <fa-icon *ngIf=\"threadStateFilter === ThreadState.Blocked\" icon=\"check\"></fa-icon>\r\n      Blocked&nbsp;<span class=\"badge rounded-pill bg-default\">{{ threadDumpBlocked }}</span>\r\n    </span>\r\n  </div>\r\n\r\n  <div class=\"pad\" *ngFor=\"let thread of getThreads()\">\r\n    <h6>\r\n      <span class=\"badge\" [ngClass]=\"getBadgeClass(thread.threadState)\">{{ thread.threadState }}</span>\r\n\r\n      &nbsp;{{ thread.threadName }} (ID {{ thread.threadId }})\r\n\r\n      <a (click)=\"thread.showThreadDump = !thread.showThreadDump\" href=\"javascript:void(0);\">\r\n        <span [hidden]=\"thread.showThreadDump\">Show Stacktrace</span>\r\n        <span [hidden]=\"!thread.showThreadDump\">Hide Stacktrace</span>\r\n      </a>\r\n    </h6>\r\n\r\n    <div class=\"card\" [hidden]=\"!thread.showThreadDump\">\r\n      <div class=\"card-body\">\r\n        <div *ngFor=\"let st of thread.stackTrace\" class=\"break\">\r\n          <samp\r\n            >{{ st.className }}.{{ st.methodName }}(<code>{{ st.fileName }}:{{ st.lineNumber }}</code\r\n            >)</samp\r\n          >\r\n          <span class=\"mt-1\"></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <table class=\"table table-sm table-responsive\">\r\n      <caption>\r\n        Threads dump:\r\n        {{\r\n          thread.threadName\r\n        }}\r\n      </caption>\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">Blocked Time</th>\r\n          <th scope=\"col\">Blocked Count</th>\r\n          <th scope=\"col\">Waited Time</th>\r\n          <th scope=\"col\">Waited Count</th>\r\n          <th scope=\"col\">Lock name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>{{ thread.blockedTime }}</td>\r\n          <td>{{ thread.blockedCount }}</td>\r\n          <td>{{ thread.waitedTime }}</td>\r\n          <td>{{ thread.waitedCount }}</td>\r\n          <td class=\"thread-dump-modal-lock\" title=\"{{ thread.lockName }}\">\r\n            <code>{{ thread.lockName }}</code>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n  <button type=\"button\" class=\"btn btn-secondary float-start\" data-dismiss=\"modal\" (click)=\"dismiss()\">Done</button>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport { HttpServerRequests } from 'app/admin/metrics/metrics.model';\r\nimport { filterNaN } from 'app/core/util/operators';\r\n\r\n@Component({\r\n  selector: 'jhi-metrics-request',\r\n  templateUrl: './metrics-request.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MetricsRequestComponent {\r\n  /**\r\n   * object containing http request related metrics\r\n   */\r\n  @Input() requestMetrics?: HttpServerRequests;\r\n\r\n  /**\r\n   * boolean field saying if the metrics are in the process of being updated\r\n   */\r\n  @Input() updating?: boolean;\r\n\r\n  filterNaN = (input: number): number => filterNaN(input);\r\n}\r\n","<h3 id=\"requestMetrics\">HTTP requests (time in millisecond)</h3>\r\n\r\n<table class=\"table table-striped\" *ngIf=\"!updating && requestMetrics\" aria-describedby=\"requestMetrics\">\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">Code</th>\r\n      <th scope=\"col\">Count</th>\r\n      <th scope=\"col\" class=\"text-end\">Mean</th>\r\n      <th scope=\"col\" class=\"text-end\">Max</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let entry of requestMetrics['percode'] | keyvalue\">\r\n      <td>{{ entry.key }}</td>\r\n      <td>\r\n        <ngb-progressbar [max]=\"requestMetrics['all'].count\" [value]=\"entry.value.count\" [striped]=\"true\" [animated]=\"false\" type=\"success\">\r\n          <span>{{ entry.value.count }}</span>\r\n        </ngb-progressbar>\r\n      </td>\r\n      <td class=\"text-end\">\r\n        {{ filterNaN(entry.value.mean) | number: '1.0-2' }}\r\n      </td>\r\n      <td class=\"text-end\">{{ entry.value.max | number: '1.0-2' }}</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\nimport { ProcessMetrics } from 'app/admin/metrics/metrics.model';\r\n\r\n@Component({\r\n  selector: 'jhi-metrics-system',\r\n  templateUrl: './metrics-system.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MetricsSystemComponent {\r\n  /**\r\n   * object containing thread related metrics\r\n   */\r\n  @Input() systemMetrics?: ProcessMetrics;\r\n\r\n  /**\r\n   * boolean field saying if the metrics are in the process of being updated\r\n   */\r\n  @Input() updating?: boolean;\r\n\r\n  convertMillisecondsToDuration(ms: number): string {\r\n    const times = {\r\n      year: 31557600000,\r\n      month: 2629746000,\r\n      day: 86400000,\r\n      hour: 3600000,\r\n      minute: 60000,\r\n      second: 1000,\r\n    };\r\n    let timeString = '';\r\n    for (const [key, value] of Object.entries(times)) {\r\n      if (Math.floor(ms / value) > 0) {\r\n        let plural = '';\r\n        if (Math.floor(ms / value) > 1) {\r\n          plural = 's';\r\n        }\r\n        timeString += `${Math.floor(ms / value).toString()} ${key.toString()}${plural} `;\r\n        ms = ms - value * Math.floor(ms / value);\r\n      }\r\n    }\r\n    return timeString;\r\n  }\r\n}\r\n","<h4>System</h4>\r\n\r\n<ng-container *ngIf=\"!updating && systemMetrics\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-4\">Uptime</div>\r\n    <div class=\"col-md-8 text-end\">{{ convertMillisecondsToDuration(systemMetrics['process.uptime']) }}</div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-md-4\">Start time</div>\r\n    <div class=\"col-md-8 text-end\">{{ systemMetrics['process.start.time'] | date: 'full' }}</div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-md-9\">Process CPU usage</div>\r\n    <div class=\"col-md-3 text-end\">{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</div>\r\n  </div>\r\n\r\n  <ngb-progressbar [value]=\"100 * systemMetrics['process.cpu.usage']\" [striped]=\"true\" [animated]=\"false\" type=\"success\">\r\n    <span>{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</span>\r\n  </ngb-progressbar>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-md-9\">System CPU usage</div>\r\n    <div class=\"col-md-3 text-end\">{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</div>\r\n  </div>\r\n\r\n  <ngb-progressbar [value]=\"100 * systemMetrics['system.cpu.usage']\" [striped]=\"true\" [animated]=\"false\" type=\"success\">\r\n    <span>{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</span>\r\n  </ngb-progressbar>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-md-9\">System CPU count</div>\r\n    <div class=\"col-md-3 text-end\">{{ systemMetrics['system.cpu.count'] }}</div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-md-9\">System 1m Load average</div>\r\n    <div class=\"col-md-3 text-end\">{{ systemMetrics['system.load.average.1m'] | number: '1.0-2' }}</div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-md-9\">Process files max</div>\r\n    <div class=\"col-md-3 text-end\">{{ systemMetrics['process.files.max'] | number: '1.0-0' }}</div>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-md-9\">Process files open</div>\r\n    <div class=\"col-md-3 text-end\">{{ systemMetrics['process.files.open'] | number: '1.0-0' }}</div>\r\n  </div>\r\n</ng-container>\r\n","import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { combineLatest } from 'rxjs';\r\n\r\nimport { MetricsService } from './metrics.service';\r\nimport { Metrics, Thread } from './metrics.model';\r\n\r\n@Component({\r\n  selector: 'jhi-metrics',\r\n  templateUrl: './metrics.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MetricsComponent implements OnInit {\r\n  metrics?: Metrics;\r\n  threads?: Thread[];\r\n  updatingMetrics = true;\r\n\r\n  constructor(private metricsService: MetricsService, private changeDetector: ChangeDetectorRef) {}\r\n\r\n  ngOnInit(): void {\r\n    this.refresh();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.updatingMetrics = true;\r\n    combineLatest([this.metricsService.getMetrics(), this.metricsService.threadDump()]).subscribe(([metrics, threadDump]) => {\r\n      this.metrics = metrics;\r\n      this.threads = threadDump.threads;\r\n      this.updatingMetrics = false;\r\n      this.changeDetector.markForCheck();\r\n    });\r\n  }\r\n\r\n  metricsKeyExists(key: keyof Metrics): boolean {\r\n    return Boolean(this.metrics?.[key]);\r\n  }\r\n\r\n  metricsKeyExistsAndObjectNotEmpty(key: keyof Metrics): boolean {\r\n    return Boolean(this.metrics?.[key] && JSON.stringify(this.metrics[key]) !== '{}');\r\n  }\r\n}\r\n","<div>\r\n  <h2>\r\n    <span id=\"metrics-page-heading\" data-cy=\"metricsPageHeading\">Application Metrics</span>\r\n\r\n    <button class=\"btn btn-primary float-end\" (click)=\"refresh()\"><fa-icon icon=\"sync\"></fa-icon> <span>Refresh</span></button>\r\n  </h2>\r\n\r\n  <h3>JVM Metrics</h3>\r\n\r\n  <div class=\"row\" *ngIf=\"metrics && !updatingMetrics\">\r\n    <jhi-jvm-memory class=\"col-md-4\" [updating]=\"updatingMetrics\" [jvmMemoryMetrics]=\"metrics.jvm\"></jhi-jvm-memory>\r\n\r\n    <jhi-jvm-threads class=\"col-md-4\" [threads]=\"threads\"></jhi-jvm-threads>\r\n\r\n    <jhi-metrics-system class=\"col-md-4\" [updating]=\"updatingMetrics\" [systemMetrics]=\"metrics.processMetrics\"></jhi-metrics-system>\r\n  </div>\r\n\r\n  <jhi-metrics-garbagecollector\r\n    *ngIf=\"metrics && metricsKeyExists('garbageCollector')\"\r\n    [updating]=\"updatingMetrics\"\r\n    [garbageCollectorMetrics]=\"metrics.garbageCollector\"\r\n  ></jhi-metrics-garbagecollector>\r\n\r\n  <div class=\"well well-lg\" *ngIf=\"updatingMetrics\">Updating...</div>\r\n\r\n  <jhi-metrics-request\r\n    *ngIf=\"metrics && metricsKeyExists('http.server.requests')\"\r\n    [updating]=\"updatingMetrics\"\r\n    [requestMetrics]=\"metrics['http.server.requests']\"\r\n  ></jhi-metrics-request>\r\n\r\n  <jhi-metrics-endpoints-requests\r\n    *ngIf=\"metrics && metricsKeyExists('services')\"\r\n    [updating]=\"updatingMetrics\"\r\n    [endpointsRequestsMetrics]=\"metrics.services\"\r\n  ></jhi-metrics-endpoints-requests>\r\n\r\n  <jhi-metrics-cache\r\n    *ngIf=\"metrics && metricsKeyExists('cache')\"\r\n    [updating]=\"updatingMetrics\"\r\n    [cacheMetrics]=\"metrics.cache\"\r\n  ></jhi-metrics-cache>\r\n\r\n  <jhi-metrics-datasource\r\n    *ngIf=\"metrics && metricsKeyExistsAndObjectNotEmpty('databases')\"\r\n    [updating]=\"updatingMetrics\"\r\n    [datasourceMetrics]=\"metrics.databases\"\r\n  ></jhi-metrics-datasource>\r\n</div>\r\n","export interface Metrics {\r\n  jvm: { [key: string]: JvmMetrics };\r\n  databases: Databases;\r\n  'http.server.requests': HttpServerRequests;\r\n  cache: { [key: string]: CacheMetrics };\r\n  garbageCollector: GarbageCollector;\r\n  services: Services;\r\n  processMetrics: ProcessMetrics;\r\n}\r\n\r\nexport interface JvmMetrics {\r\n  committed: number;\r\n  max: number;\r\n  used: number;\r\n}\r\n\r\nexport interface Databases {\r\n  min: Value;\r\n  idle: Value;\r\n  max: Value;\r\n  usage: MetricsWithPercentile;\r\n  pending: Value;\r\n  active: Value;\r\n  acquire: MetricsWithPercentile;\r\n  creation: MetricsWithPercentile;\r\n  connections: Value;\r\n}\r\n\r\nexport interface Value {\r\n  value: number;\r\n}\r\n\r\nexport interface MetricsWithPercentile {\r\n  '0.0': number;\r\n  '1.0': number;\r\n  max: number;\r\n  totalTime: number;\r\n  mean: number;\r\n  '0.5': number;\r\n  count: number;\r\n  '0.99': number;\r\n  '0.75': number;\r\n  '0.95': number;\r\n}\r\n\r\nexport interface HttpServerRequests {\r\n  all: {\r\n    count: number;\r\n  };\r\n  percode: { [key: string]: MaxMeanCount };\r\n}\r\n\r\nexport interface MaxMeanCount {\r\n  max: number;\r\n  mean: number;\r\n  count: number;\r\n}\r\n\r\nexport interface CacheMetrics {\r\n  'cache.gets.miss': number;\r\n  'cache.puts': number;\r\n  'cache.gets.hit': number;\r\n  'cache.removals': number;\r\n  'cache.evictions': number;\r\n}\r\n\r\nexport interface GarbageCollector {\r\n  'jvm.gc.max.data.size': number;\r\n  'jvm.gc.pause': MetricsWithPercentile;\r\n  'jvm.gc.memory.promoted': number;\r\n  'jvm.gc.memory.allocated': number;\r\n  classesLoaded: number;\r\n  'jvm.gc.live.data.size': number;\r\n  classesUnloaded: number;\r\n}\r\n\r\nexport interface Services {\r\n  [key: string]: {\r\n    [key in HttpMethod]?: MaxMeanCount;\r\n  };\r\n}\r\n\r\nexport enum HttpMethod {\r\n  Post = 'POST',\r\n  Get = 'GET',\r\n  Put = 'PUT',\r\n  Patch = 'PATCH',\r\n  Delete = 'DELETE',\r\n}\r\n\r\nexport interface ProcessMetrics {\r\n  'system.cpu.usage': number;\r\n  'system.cpu.count': number;\r\n  'system.load.average.1m'?: number;\r\n  'process.cpu.usage': number;\r\n  'process.files.max'?: number;\r\n  'process.files.open'?: number;\r\n  'process.start.time': number;\r\n  'process.uptime': number;\r\n}\r\n\r\nexport interface ThreadDump {\r\n  threads: Thread[];\r\n}\r\n\r\nexport interface Thread {\r\n  threadName: string;\r\n  threadId: number;\r\n  blockedTime: number;\r\n  blockedCount: number;\r\n  waitedTime: number;\r\n  waitedCount: number;\r\n  lockName: string | null;\r\n  lockOwnerId: number;\r\n  lockOwnerName: string | null;\r\n  daemon: boolean;\r\n  inNative: boolean;\r\n  suspended: boolean;\r\n  threadState: ThreadState;\r\n  priority: number;\r\n  stackTrace: StackTrace[];\r\n  lockedMonitors: LockedMonitor[];\r\n  lockedSynchronizers: string[];\r\n  lockInfo: LockInfo | null;\r\n  // custom field for showing-hiding thread dump\r\n  showThreadDump?: boolean;\r\n}\r\n\r\nexport interface LockInfo {\r\n  className: string;\r\n  identityHashCode: number;\r\n}\r\n\r\nexport interface LockedMonitor {\r\n  className: string;\r\n  identityHashCode: number;\r\n  lockedStackDepth: number;\r\n  lockedStackFrame: StackTrace;\r\n}\r\n\r\nexport interface StackTrace {\r\n  classLoaderName: string | null;\r\n  moduleName: string | null;\r\n  moduleVersion: string | null;\r\n  methodName: string;\r\n  fileName: string;\r\n  lineNumber: number;\r\n  className: string;\r\n  nativeMethod: boolean;\r\n}\r\n\r\nexport enum ThreadState {\r\n  Runnable = 'RUNNABLE',\r\n  TimedWaiting = 'TIMED_WAITING',\r\n  Waiting = 'WAITING',\r\n  Blocked = 'BLOCKED',\r\n  New = 'NEW',\r\n  Terminated = 'TERMINATED',\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { MetricsComponent } from './metrics.component';\r\nimport { metricsRoute } from './metrics.route';\r\nimport { JvmMemoryComponent } from './blocks/jvm-memory/jvm-memory.component';\r\nimport { JvmThreadsComponent } from './blocks/jvm-threads/jvm-threads.component';\r\nimport { MetricsCacheComponent } from './blocks/metrics-cache/metrics-cache.component';\r\nimport { MetricsDatasourceComponent } from './blocks/metrics-datasource/metrics-datasource.component';\r\nimport { MetricsEndpointsRequestsComponent } from './blocks/metrics-endpoints-requests/metrics-endpoints-requests.component';\r\nimport { MetricsGarbageCollectorComponent } from './blocks/metrics-garbagecollector/metrics-garbagecollector.component';\r\nimport { MetricsModalThreadsComponent } from './blocks/metrics-modal-threads/metrics-modal-threads.component';\r\nimport { MetricsRequestComponent } from './blocks/metrics-request/metrics-request.component';\r\nimport { MetricsSystemComponent } from './blocks/metrics-system/metrics-system.component';\r\n\r\n@NgModule({\r\n  imports: [SharedModule, RouterModule.forChild([metricsRoute])],\r\n  declarations: [\r\n    MetricsComponent,\r\n    JvmMemoryComponent,\r\n    JvmThreadsComponent,\r\n    MetricsCacheComponent,\r\n    MetricsDatasourceComponent,\r\n    MetricsEndpointsRequestsComponent,\r\n    MetricsGarbageCollectorComponent,\r\n    MetricsModalThreadsComponent,\r\n    MetricsRequestComponent,\r\n    MetricsSystemComponent,\r\n  ],\r\n})\r\nexport class MetricsModule {}\r\n","import { Route } from '@angular/router';\r\n\r\nimport { MetricsComponent } from './metrics.component';\r\n\r\nexport const metricsRoute: Route = {\r\n  path: '',\r\n  component: MetricsComponent,\r\n  data: {\r\n    pageTitle: 'Application Metrics',\r\n  },\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\nimport { Metrics, ThreadDump } from './metrics.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class MetricsService {\r\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\r\n\r\n  getMetrics(): Observable<Metrics> {\r\n    return this.http.get<Metrics>(this.applicationConfigService.getEndpointFor('management/jhimetrics'));\r\n  }\r\n\r\n  threadDump(): Observable<ThreadDump> {\r\n    return this.http.get<ThreadDump>(this.applicationConfigService.getEndpointFor('management/threaddump'));\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}