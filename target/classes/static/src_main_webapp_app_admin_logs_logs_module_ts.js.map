{"version":3,"file":"src_main_webapp_app_admin_logs_logs_module_ts.js","mappings":";;;;;;;;;;;;;AAYO,MAAM,GAAG;IACd,YAAmB,IAAY,EAAS,KAAY;QAAjC,SAAI,GAAJ,IAAI,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAO;IAAG,CAAC;CACzD;;;;;;;;;;;;;;;;;;;;;;;ACZyD;;;;;;;;;;ICepD,qEAAqD;IACnD;IAAA,qEAAI;IACF;IAAA,wEAAO;IAAA,uDAAgC;;IAAA,4DAAQ;IACjD;IAAA,4DAAK;IACL;IAAA,qEAAI;IACF;IAAA,8EAIC;IAHC,gWAAS,6FAAyB,OAAO,CAAC,KAAC;IAI3C,2FACF;IAAA,4DAAS;IAET;IAAA,8EAIC;IAHC,gWAAS,6FAAyB,OAAO,CAAC,KAAC;IAI3C,2FACF;IAAA,4DAAS;IAET;IAAA,8EAIC;IAHC,gWAAS,6FAAyB,MAAM,CAAC,KAAC;IAI1C,0FACF;IAAA,4DAAS;IAET;IAAA,8EAIC;IAHC,gWAAS,6FAAyB,MAAM,CAAC,KAAC;IAI1C,0FACF;IAAA,4DAAS;IAET;IAAA,8EAIC;IAHC,gWAAS,6FAAyB,OAAO,CAAC,KAAC;IAI3C,2FACF;IAAA,4DAAS;IAET;IAAA,8EAIC;IAHC,gWAAS,6FAAyB,KAAK,CAAC,KAAC;IAIzC,yFACF;IAAA,4DAAS;IACX;IAAA,4DAAK;IACP;IAAA,4DAAK;;;IAnDM,0DAAgC;IAAhC,wJAAgC;IAKrC,0DAAkE;IAAlE,8HAAkE;IAQlE,0DAAkE;IAAlE,8HAAkE;IAQlE,0DAA8D;IAA9D,0HAA8D;IAQ9D,0DAAiE;IAAjE,6HAAiE;IAQjE,0DAAiE;IAAjE,6HAAiE;IAQjE,0DAAkE;IAAlE,8HAAkE;;;;IAhE9E,yEAA8C;IAC5C;IAAA,wEAAqD;IAAA,+DAAI;IAAA,4DAAK;IAE9D;IAAA,oEAAG;IAAA,uDAAuC;IAAA,4DAAI;IAE9C;IAAA,uEAAM;IAAA,iEAAM;IAAA,4DAAO;IACnB;IAAA,4EAAiG;IAA9E,yYAAoB,qPAAkB,iFAAe,KAAjC;IAAvC,4DAAiG;IAEjG;IAAA,4EAAgG;IAC9F;IAAA,yEAAO;IACL;IAAA,yEAA+F;IAAnF,6YAAyB,ikBAAyC,iFAAe,KAAxD;IACnC;IAAA,yEAAiC;IAAM,gEAAI;IAAA,4DAAO;IAAC;IAAA,yEAA+B;IAAA,4DAAK;IACvF;IAAA,yEAAkC;IAAM,iEAAK;IAAA,4DAAO;IAAC;IAAA,yEAA+B;IAAA,4DAAK;IAC3F;IAAA,4DAAK;IACP;IAAA,4DAAQ;IAER;IAAA,yEAAO;IACL;IAAA,iHAqDK;IACP;IAAA,4DAAQ;IACV;IAAA,4DAAQ;IACV;IAAA,4DAAM;;;IAtED,0DAAuC;IAAvC,kHAAuC;IAGvB,0DAAoB;IAApB,kFAAoB;IAIvB,0DAAyB;IAAzB,uFAAyB;IAOd,2DAA4B;IAA5B,qGAA4B;;ADRlD,MAAM,aAAa;IAOxB,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAJ5C,WAAM,GAAG,EAAE,CAAC;QACZ,cAAS,GAAc,MAAM,CAAC;QAC9B,cAAS,GAAG,IAAI,CAAC;IAE8B,CAAC;IAEhD,QAAQ;QACN,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAED,WAAW,CAAC,IAAY,EAAE,KAAY;QACpC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC;IAC1F,CAAC;IAED,aAAa;QACX,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,OAAQ,CAAC,MAAM,CACnD,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CACxF,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACd,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBACzC,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAChC;iBAAM,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBAChD,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAChC;iBAAM,IAAI,IAAI,CAAC,SAAS,KAAK,OAAO,EAAE;gBACrC,OAAO,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACjC;YACD,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,qBAAqB;QAC3B,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC,QAAyB,EAAE,EAAE;YACjE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,IAAI,2CAAG,CAAC,GAAG,EAAE,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;YAC5G,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;;0EArCU,aAAa;2GAAb,aAAa;QCT1B,0GAyEM;QACN;;QA1E+B,6EAAa;;;;;;;;;;;;;;;;;;;;;ACCG;AACS;AAEP;AACR;;;AAMlC,MAAM,UAAU;;oEAAV,UAAU;uGAAV,UAAU;2GAHX,kEAAY,EAAE,kEAAqB,CAAC,CAAC,kDAAS,CAAC,CAAC;mIAG/C,UAAU,mBAFN,0DAAa,aADlB,kEAAY,EAAE;;;;;;;;;;;;;;;;ACNuB;AAE1C,MAAM,SAAS,GAAU;IAC9B,IAAI,EAAE,EAAE;IACR,SAAS,EAAE,0DAAa;IACxB,IAAI,EAAE;QACJ,SAAS,EAAE,MAAM;KAClB;CACF,CAAC;;;;;;;;;;;;;;;;;;;;;ACFK,MAAM,WAAW;IACtB,YAAoB,IAAgB,EAAU,wBAAkD;QAA5E,SAAI,GAAJ,IAAI,CAAY;QAAU,6BAAwB,GAAxB,wBAAwB,CAA0B;IAAG,CAAC;IAEpG,WAAW,CAAC,IAAY,EAAE,eAAsB;QAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,cAAc,CAAC,sBAAsB,IAAI,EAAE,CAAC,EAAE,EAAE,eAAe,EAAE,CAAC,CAAC;IACzH,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAkB,IAAI,CAAC,wBAAwB,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAC5G,CAAC;;sEATU,WAAW;4GAAX,WAAW,WAAX,WAAW,mBADE,MAAM","sources":["./src/main/webapp/app/admin/logs/log.model.ts","./src/main/webapp/app/admin/logs/logs.component.ts","./src/main/webapp/app/admin/logs/logs.component.html","./src/main/webapp/app/admin/logs/logs.module.ts","./src/main/webapp/app/admin/logs/logs.route.ts","./src/main/webapp/app/admin/logs/logs.service.ts"],"sourcesContent":["export type Level = 'TRACE' | 'DEBUG' | 'INFO' | 'WARN' | 'ERROR' | 'OFF';\r\n\r\nexport interface Logger {\r\n  configuredLevel: Level | null;\r\n  effectiveLevel: Level;\r\n}\r\n\r\nexport interface LoggersResponse {\r\n  levels: Level[];\r\n  loggers: { [key: string]: Logger };\r\n}\r\n\r\nexport class Log {\r\n  constructor(public name: string, public level: Level) {}\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { Log, LoggersResponse, Level } from './log.model';\r\nimport { LogsService } from './logs.service';\r\n\r\n@Component({\r\n  selector: 'jhi-logs',\r\n  templateUrl: './logs.component.html',\r\n})\r\nexport class LogsComponent implements OnInit {\r\n  loggers?: Log[];\r\n  filteredAndOrderedLoggers?: Log[];\r\n  filter = '';\r\n  orderProp: keyof Log = 'name';\r\n  ascending = true;\r\n\r\n  constructor(private logsService: LogsService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.findAndExtractLoggers();\r\n  }\r\n\r\n  changeLevel(name: string, level: Level): void {\r\n    this.logsService.changeLevel(name, level).subscribe(() => this.findAndExtractLoggers());\r\n  }\r\n\r\n  filterAndSort(): void {\r\n    this.filteredAndOrderedLoggers = this.loggers!.filter(\r\n      logger => !this.filter || logger.name.toLowerCase().includes(this.filter.toLowerCase())\r\n    ).sort((a, b) => {\r\n      if (a[this.orderProp] < b[this.orderProp]) {\r\n        return this.ascending ? -1 : 1;\r\n      } else if (a[this.orderProp] > b[this.orderProp]) {\r\n        return this.ascending ? 1 : -1;\r\n      } else if (this.orderProp === 'level') {\r\n        return a.name < b.name ? -1 : 1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  private findAndExtractLoggers(): void {\r\n    this.logsService.findAll().subscribe((response: LoggersResponse) => {\r\n      this.loggers = Object.entries(response.loggers).map(([key, logger]) => new Log(key, logger.effectiveLevel));\r\n      this.filterAndSort();\r\n    });\r\n  }\r\n}\r\n","<div class=\"table-responsive\" *ngIf=\"loggers\">\r\n  <h2 id=\"logs-page-heading\" data-cy=\"logsPageHeading\">Logs</h2>\r\n\r\n  <p>There are {{ loggers.length }} loggers.</p>\r\n\r\n  <span>Filter</span>\r\n  <input type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterAndSort()\" class=\"form-control\" />\r\n\r\n  <table class=\"table table-sm table-striped table-bordered\" aria-describedby=\"logs-page-heading\">\r\n    <thead>\r\n      <tr jhiSort [(predicate)]=\"orderProp\" [(ascending)]=\"ascending\" (sortChange)=\"filterAndSort()\">\r\n        <th jhiSortBy=\"name\" scope=\"col\"><span>Name</span> <fa-icon icon=\"sort\"></fa-icon></th>\r\n        <th jhiSortBy=\"level\" scope=\"col\"><span>Level</span> <fa-icon icon=\"sort\"></fa-icon></th>\r\n      </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n      <tr *ngFor=\"let logger of filteredAndOrderedLoggers\">\r\n        <td>\r\n          <small>{{ logger.name | slice: 0:140 }}</small>\r\n        </td>\r\n        <td>\r\n          <button\r\n            (click)=\"changeLevel(logger.name, 'TRACE')\"\r\n            [ngClass]=\"logger.level === 'TRACE' ? 'btn-primary' : 'btn-light'\"\r\n            class=\"btn btn-sm\"\r\n          >\r\n            TRACE\r\n          </button>\r\n\r\n          <button\r\n            (click)=\"changeLevel(logger.name, 'DEBUG')\"\r\n            [ngClass]=\"logger.level === 'DEBUG' ? 'btn-success' : 'btn-light'\"\r\n            class=\"btn btn-sm\"\r\n          >\r\n            DEBUG\r\n          </button>\r\n\r\n          <button\r\n            (click)=\"changeLevel(logger.name, 'INFO')\"\r\n            [ngClass]=\"logger.level === 'INFO' ? 'btn-info' : 'btn-light'\"\r\n            class=\"btn btn-sm\"\r\n          >\r\n            INFO\r\n          </button>\r\n\r\n          <button\r\n            (click)=\"changeLevel(logger.name, 'WARN')\"\r\n            [ngClass]=\"logger.level === 'WARN' ? 'btn-warning' : 'btn-light'\"\r\n            class=\"btn btn-sm\"\r\n          >\r\n            WARN\r\n          </button>\r\n\r\n          <button\r\n            (click)=\"changeLevel(logger.name, 'ERROR')\"\r\n            [ngClass]=\"logger.level === 'ERROR' ? 'btn-danger' : 'btn-light'\"\r\n            class=\"btn btn-sm\"\r\n          >\r\n            ERROR\r\n          </button>\r\n\r\n          <button\r\n            (click)=\"changeLevel(logger.name, 'OFF')\"\r\n            [ngClass]=\"logger.level === 'OFF' ? 'btn-secondary' : 'btn-light'\"\r\n            class=\"btn btn-sm\"\r\n          >\r\n            OFF\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from 'app/shared/shared.module';\r\n\r\nimport { LogsComponent } from './logs.component';\r\nimport { logsRoute } from './logs.route';\r\n\r\n@NgModule({\r\n  imports: [SharedModule, RouterModule.forChild([logsRoute])],\r\n  declarations: [LogsComponent],\r\n})\r\nexport class LogsModule {}\r\n","import { Route } from '@angular/router';\r\n\r\nimport { LogsComponent } from './logs.component';\r\n\r\nexport const logsRoute: Route = {\r\n  path: '',\r\n  component: LogsComponent,\r\n  data: {\r\n    pageTitle: 'Logs',\r\n  },\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\r\nimport { LoggersResponse, Level } from './log.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LogsService {\r\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\r\n\r\n  changeLevel(name: string, configuredLevel: Level): Observable<{}> {\r\n    return this.http.post(this.applicationConfigService.getEndpointFor(`management/loggers/${name}`), { configuredLevel });\r\n  }\r\n\r\n  findAll(): Observable<LoggersResponse> {\r\n    return this.http.get<LoggersResponse>(this.applicationConfigService.getEndpointFor('management/loggers'));\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}