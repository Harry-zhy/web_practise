{"version":3,"file":"src_main_webapp_app_entities_questionnaire_questionnaire_module_ts.js","mappings":"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","sources":["./src/main/webapp/app/entities/questionnaire/delete/questionnaire-delete-dialog.component.ts","./src/main/webapp/app/entities/questionnaire/delete/questionnaire-delete-dialog.component.html","./src/main/webapp/app/entities/questionnaire/detail/questionnaire-detail.component.ts","./src/main/webapp/app/entities/questionnaire/detail/questionnaire-detail.component.html","./src/main/webapp/app/entities/questionnaire/list/questionnaire.component.ts","./src/main/webapp/app/entities/questionnaire/list/questionnaire.component.html","./src/main/webapp/app/entities/questionnaire/questionnaire.module.ts","./src/main/webapp/app/entities/questionnaire/route/questionnaire-routing-resolve.service.ts","./src/main/webapp/app/entities/questionnaire/route/questionnaire-routing.module.ts","./src/main/webapp/app/entities/questionnaire/update/questionnaire-form.service.ts","./src/main/webapp/app/entities/questionnaire/update/questionnaire-update.component.ts","./src/main/webapp/app/entities/questionnaire/update/questionnaire-update.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { IQuestionnaire } from '../questionnaire.model';\r\nimport { QuestionnaireService } from '../service/questionnaire.service';\r\nimport { ITEM_DELETED_EVENT } from 'app/config/navigation.constants';\r\n\r\n@Component({\r\n  templateUrl: './questionnaire-delete-dialog.component.html',\r\n})\r\nexport class QuestionnaireDeleteDialogComponent {\r\n  questionnaire?: IQuestionnaire;\r\n\r\n  constructor(protected questionnaireService: QuestionnaireService, protected activeModal: NgbActiveModal) {}\r\n\r\n  cancel(): void {\r\n    this.activeModal.dismiss();\r\n  }\r\n\r\n  confirmDelete(id: number): void {\r\n    this.questionnaireService.delete(id).subscribe(() => {\r\n      this.activeModal.close(ITEM_DELETED_EVENT);\r\n    });\r\n  }\r\n}\r\n","<form *ngIf=\"questionnaire\" name=\"deleteForm\" (ngSubmit)=\"confirmDelete(questionnaire.id!)\">\r\n  <div class=\"modal-header\">\r\n    <h4 class=\"modal-title\" data-cy=\"questionnaireDeleteDialogHeading\">Confirm delete operation</h4>\r\n\r\n    <button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" aria-hidden=\"true\" (click)=\"cancel()\">&times;</button>\r\n  </div>\r\n\r\n  <div class=\"modal-body\">\r\n    <jhi-alert-error></jhi-alert-error>\r\n    <p id=\"jhi-delete-questionnaire-heading\">Are you sure you want to delete Questionnaire {{ questionnaire.id }}?</p>\r\n  </div>\r\n\r\n  <div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\" (click)=\"cancel()\">\r\n      <fa-icon icon=\"ban\"></fa-icon>&nbsp;<span>Cancel</span>\r\n    </button>\r\n\r\n    <button id=\"jhi-confirm-delete-questionnaire\" data-cy=\"entityConfirmDeleteButton\" type=\"submit\" class=\"btn btn-danger\">\r\n      <fa-icon icon=\"times\"></fa-icon>&nbsp;<span>Delete</span>\r\n    </button>\r\n  </div>\r\n</form>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nimport { IQuestionnaire } from '../questionnaire.model';\r\n\r\n@Component({\r\n  selector: 'jhi-questionnaire-detail',\r\n  templateUrl: './questionnaire-detail.component.html',\r\n})\r\nexport class QuestionnaireDetailComponent implements OnInit {\r\n  questionnaire: IQuestionnaire | null = null;\r\n\r\n  constructor(protected activatedRoute: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRoute.data.subscribe(({ questionnaire }) => {\r\n      this.questionnaire = questionnaire;\r\n    });\r\n  }\r\n\r\n  previousState(): void {\r\n    window.history.back();\r\n  }\r\n}\r\n","<div class=\"d-flex justify-content-center\">\r\n  <div class=\"col-8\">\r\n    <div *ngIf=\"questionnaire\">\r\n      <h2 data-cy=\"questionnaireDetailsHeading\"><span>Questionnaire</span></h2>\r\n\r\n      <hr />\r\n\r\n      <jhi-alert-error></jhi-alert-error>\r\n\r\n      <jhi-alert></jhi-alert>\r\n\r\n      <dl class=\"row-md jh-entity-details\">\r\n        <dt><span>ID</span></dt>\r\n        <dd>\r\n          <span>{{ questionnaire.id }}</span>\r\n        </dd>\r\n        <dt><span>Date</span></dt>\r\n        <dd>\r\n          <span>{{ questionnaire.date | formatMediumDatetime }}</span>\r\n        </dd>\r\n        <dt><span>User Name</span></dt>\r\n        <dd>\r\n          <span>{{ questionnaire.userName }}</span>\r\n        </dd>\r\n        <dt><span>Questionnaire</span></dt>\r\n        <dd>\r\n          <div *ngIf=\"questionnaire.questionnaire\">\r\n            <a [routerLink]=\"['/intro', questionnaire.questionnaire.id, 'view']\">{{ questionnaire.questionnaire.id }}</a>\r\n          </div>\r\n        </dd>\r\n      </dl>\r\n\r\n      <button type=\"submit\" (click)=\"previousState()\" class=\"btn btn-info\" data-cy=\"entityDetailsBackButton\">\r\n        <fa-icon icon=\"arrow-left\"></fa-icon>&nbsp;<span>Back</span>\r\n      </button>\r\n\r\n      <button type=\"button\" [routerLink]=\"['/questionnaire', questionnaire.id, 'edit']\" class=\"btn btn-primary\">\r\n        <fa-icon icon=\"pencil-alt\"></fa-icon>&nbsp;<span>Edit</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Data, ParamMap, Router } from '@angular/router';\r\nimport { combineLatest, filter, Observable, switchMap, tap } from 'rxjs';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { IQuestionnaire } from '../questionnaire.model';\r\nimport { ASC, DESC, SORT, ITEM_DELETED_EVENT, DEFAULT_SORT_DATA } from 'app/config/navigation.constants';\r\nimport { EntityArrayResponseType, QuestionnaireService } from '../service/questionnaire.service';\r\nimport { QuestionnaireDeleteDialogComponent } from '../delete/questionnaire-delete-dialog.component';\r\nimport { SortService } from 'app/shared/sort/sort.service';\r\n\r\n@Component({\r\n  selector: 'jhi-questionnaire',\r\n  templateUrl: './questionnaire.component.html',\r\n})\r\nexport class QuestionnaireComponent implements OnInit {\r\n  questionnaires?: IQuestionnaire[];\r\n  isLoading = false;\r\n\r\n  predicate = 'id';\r\n  ascending = true;\r\n\r\n  constructor(\r\n    protected questionnaireService: QuestionnaireService,\r\n    protected activatedRoute: ActivatedRoute,\r\n    public router: Router,\r\n    protected sortService: SortService,\r\n    protected modalService: NgbModal\r\n  ) {}\r\n\r\n  trackId = (_index: number, item: IQuestionnaire): number => this.questionnaireService.getQuestionnaireIdentifier(item);\r\n\r\n  ngOnInit(): void {\r\n    this.load();\r\n  }\r\n\r\n  delete(questionnaire: IQuestionnaire): void {\r\n    const modalRef = this.modalService.open(QuestionnaireDeleteDialogComponent, { size: 'lg', backdrop: 'static' });\r\n    modalRef.componentInstance.questionnaire = questionnaire;\r\n    // unsubscribe not needed because closed completes on modal close\r\n    modalRef.closed\r\n      .pipe(\r\n        filter(reason => reason === ITEM_DELETED_EVENT),\r\n        switchMap(() => this.loadFromBackendWithRouteInformations())\r\n      )\r\n      .subscribe({\r\n        next: (res: EntityArrayResponseType) => {\r\n          this.onResponseSuccess(res);\r\n        },\r\n      });\r\n  }\r\n\r\n  load(): void {\r\n    this.loadFromBackendWithRouteInformations().subscribe({\r\n      next: (res: EntityArrayResponseType) => {\r\n        this.onResponseSuccess(res);\r\n      },\r\n    });\r\n  }\r\n\r\n  navigateToWithComponentValues(): void {\r\n    this.handleNavigation(this.predicate, this.ascending);\r\n  }\r\n\r\n  protected loadFromBackendWithRouteInformations(): Observable<EntityArrayResponseType> {\r\n    return combineLatest([this.activatedRoute.queryParamMap, this.activatedRoute.data]).pipe(\r\n      tap(([params, data]) => this.fillComponentAttributeFromRoute(params, data)),\r\n      switchMap(() => this.queryBackend(this.predicate, this.ascending))\r\n    );\r\n  }\r\n\r\n  protected fillComponentAttributeFromRoute(params: ParamMap, data: Data): void {\r\n    const sort = (params.get(SORT) ?? data[DEFAULT_SORT_DATA]).split(',');\r\n    this.predicate = sort[0];\r\n    this.ascending = sort[1] === ASC;\r\n  }\r\n\r\n  protected onResponseSuccess(response: EntityArrayResponseType): void {\r\n    const dataFromBody = this.fillComponentAttributesFromResponseBody(response.body);\r\n    this.questionnaires = this.refineData(dataFromBody);\r\n  }\r\n\r\n  protected refineData(data: IQuestionnaire[]): IQuestionnaire[] {\r\n    return data.sort(this.sortService.startSort(this.predicate, this.ascending ? 1 : -1));\r\n  }\r\n\r\n  protected fillComponentAttributesFromResponseBody(data: IQuestionnaire[] | null): IQuestionnaire[] {\r\n    return data ?? [];\r\n  }\r\n\r\n  protected queryBackend(predicate?: string, ascending?: boolean): Observable<EntityArrayResponseType> {\r\n    this.isLoading = true;\r\n    const queryObject = {\r\n      sort: this.getSortQueryParam(predicate, ascending),\r\n    };\r\n    return this.questionnaireService.query(queryObject).pipe(tap(() => (this.isLoading = false)));\r\n  }\r\n\r\n  protected handleNavigation(predicate?: string, ascending?: boolean): void {\r\n    const queryParamsObj = {\r\n      sort: this.getSortQueryParam(predicate, ascending),\r\n    };\r\n\r\n    this.router.navigate(['./'], {\r\n      relativeTo: this.activatedRoute,\r\n      queryParams: queryParamsObj,\r\n    });\r\n  }\r\n\r\n  protected getSortQueryParam(predicate = this.predicate, ascending = this.ascending): string[] {\r\n    const ascendingQueryParam = ascending ? ASC : DESC;\r\n    if (predicate === '') {\r\n      return [];\r\n    } else {\r\n      return [predicate + ',' + ascendingQueryParam];\r\n    }\r\n  }\r\n}\r\n","<div>\r\n  <h2 id=\"page-heading\" data-cy=\"QuestionnaireHeading\">\r\n    <span>Questionnaires</span>\r\n\r\n    <div class=\"d-flex justify-content-end\">\r\n      <button class=\"btn btn-info me-2\" (click)=\"load()\" [disabled]=\"isLoading\">\r\n        <fa-icon icon=\"sync\" [spin]=\"isLoading\"></fa-icon>\r\n        <span>Refresh list</span>\r\n      </button>\r\n\r\n      <button\r\n        id=\"jh-create-entity\"\r\n        data-cy=\"entityCreateButton\"\r\n        class=\"btn btn-primary jh-create-entity create-questionnaire\"\r\n        [routerLink]=\"['/questionnaire/new']\"\r\n      >\r\n        <fa-icon icon=\"plus\"></fa-icon>\r\n        <span> Create a new Questionnaire </span>\r\n      </button>\r\n    </div>\r\n  </h2>\r\n\r\n  <jhi-alert-error></jhi-alert-error>\r\n\r\n  <jhi-alert></jhi-alert>\r\n\r\n  <div class=\"alert alert-warning\" id=\"no-result\" *ngIf=\"questionnaires?.length === 0\">\r\n    <span>No Questionnaires found</span>\r\n  </div>\r\n\r\n  <div class=\"table-responsive table-entities\" id=\"entities\" *ngIf=\"questionnaires && questionnaires.length > 0\">\r\n    <table class=\"table table-striped\" aria-describedby=\"page-heading\">\r\n      <thead>\r\n        <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"ascending\" (sortChange)=\"navigateToWithComponentValues()\">\r\n          <th scope=\"col\" jhiSortBy=\"id\">\r\n            <div class=\"d-flex\">\r\n              <span>ID</span>\r\n              <fa-icon class=\"p-1\" icon=\"sort\"></fa-icon>\r\n            </div>\r\n          </th>\r\n          <th scope=\"col\" jhiSortBy=\"date\">\r\n            <div class=\"d-flex\">\r\n              <span>Date</span>\r\n              <fa-icon class=\"p-1\" icon=\"sort\"></fa-icon>\r\n            </div>\r\n          </th>\r\n          <th scope=\"col\" jhiSortBy=\"userName\">\r\n            <div class=\"d-flex\">\r\n              <span>User Name</span>\r\n              <fa-icon class=\"p-1\" icon=\"sort\"></fa-icon>\r\n            </div>\r\n          </th>\r\n          <th scope=\"col\" jhiSortBy=\"questionnaire.id\">\r\n            <div class=\"d-flex\">\r\n              <span>Questionnaire</span>\r\n              <fa-icon class=\"p-1\" icon=\"sort\"></fa-icon>\r\n            </div>\r\n          </th>\r\n          <th scope=\"col\"></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let questionnaire of questionnaires; trackBy: trackId\" data-cy=\"entityTable\">\r\n          <td>\r\n            <a [routerLink]=\"['/questionnaire', questionnaire.id, 'view']\">{{ questionnaire.id }}</a>\r\n          </td>\r\n          <td>{{ questionnaire.date | formatMediumDatetime }}</td>\r\n          <td>{{ questionnaire.userName }}</td>\r\n          <td>\r\n            <div *ngIf=\"questionnaire.questionnaire\">\r\n              <a [routerLink]=\"['/intro', questionnaire.questionnaire.id, 'view']\">{{ questionnaire.questionnaire.id }}</a>\r\n            </div>\r\n          </td>\r\n          <td class=\"text-end\">\r\n            <div class=\"btn-group\">\r\n              <button\r\n                type=\"submit\"\r\n                [routerLink]=\"['/questionnaire', questionnaire.id, 'view']\"\r\n                class=\"btn btn-info btn-sm\"\r\n                data-cy=\"entityDetailsButton\"\r\n              >\r\n                <fa-icon icon=\"eye\"></fa-icon>\r\n                <span class=\"d-none d-md-inline\">View</span>\r\n              </button>\r\n\r\n              <button\r\n                type=\"submit\"\r\n                [routerLink]=\"['/questionnaire', questionnaire.id, 'edit']\"\r\n                class=\"btn btn-primary btn-sm\"\r\n                data-cy=\"entityEditButton\"\r\n              >\r\n                <fa-icon icon=\"pencil-alt\"></fa-icon>\r\n                <span class=\"d-none d-md-inline\">Edit</span>\r\n              </button>\r\n\r\n              <button type=\"submit\" (click)=\"delete(questionnaire)\" class=\"btn btn-danger btn-sm\" data-cy=\"entityDeleteButton\">\r\n                <fa-icon icon=\"times\"></fa-icon>\r\n                <span class=\"d-none d-md-inline\">Delete</span>\r\n              </button>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { QuestionnaireComponent } from './list/questionnaire.component';\r\nimport { QuestionnaireDetailComponent } from './detail/questionnaire-detail.component';\r\nimport { QuestionnaireUpdateComponent } from './update/questionnaire-update.component';\r\nimport { QuestionnaireDeleteDialogComponent } from './delete/questionnaire-delete-dialog.component';\r\nimport { QuestionnaireRoutingModule } from './route/questionnaire-routing.module';\r\n\r\n@NgModule({\r\n  imports: [SharedModule, QuestionnaireRoutingModule],\r\n  declarations: [QuestionnaireComponent, QuestionnaireDetailComponent, QuestionnaireUpdateComponent, QuestionnaireDeleteDialogComponent],\r\n})\r\nexport class QuestionnaireModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { Resolve, ActivatedRouteSnapshot, Router } from '@angular/router';\r\nimport { Observable, of, EMPTY } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\n\r\nimport { IQuestionnaire } from '../questionnaire.model';\r\nimport { QuestionnaireService } from '../service/questionnaire.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class QuestionnaireRoutingResolveService implements Resolve<IQuestionnaire | null> {\r\n  constructor(protected service: QuestionnaireService, protected router: Router) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Observable<IQuestionnaire | null | never> {\r\n    const id = route.params['id'];\r\n    if (id) {\r\n      return this.service.find(id).pipe(\r\n        mergeMap((questionnaire: HttpResponse<IQuestionnaire>) => {\r\n          if (questionnaire.body) {\r\n            return of(questionnaire.body);\r\n          } else {\r\n            this.router.navigate(['404']);\r\n            return EMPTY;\r\n          }\r\n        })\r\n      );\r\n    }\r\n    return of(null);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { UserRouteAccessService } from 'app/core/auth/user-route-access.service';\r\nimport { QuestionnaireComponent } from '../list/questionnaire.component';\r\nimport { QuestionnaireDetailComponent } from '../detail/questionnaire-detail.component';\r\nimport { QuestionnaireUpdateComponent } from '../update/questionnaire-update.component';\r\nimport { QuestionnaireRoutingResolveService } from './questionnaire-routing-resolve.service';\r\nimport { ASC } from 'app/config/navigation.constants';\r\n\r\nconst questionnaireRoute: Routes = [\r\n  {\r\n    path: '',\r\n    component: QuestionnaireComponent,\r\n    data: {\r\n      defaultSort: 'id,' + ASC,\r\n    },\r\n    canActivate: [UserRouteAccessService],\r\n  },\r\n  {\r\n    path: ':id/view',\r\n    component: QuestionnaireDetailComponent,\r\n    resolve: {\r\n      questionnaire: QuestionnaireRoutingResolveService,\r\n    },\r\n    canActivate: [UserRouteAccessService],\r\n  },\r\n  {\r\n    path: 'new',\r\n    component: QuestionnaireUpdateComponent,\r\n    resolve: {\r\n      questionnaire: QuestionnaireRoutingResolveService,\r\n    },\r\n    canActivate: [UserRouteAccessService],\r\n  },\r\n  {\r\n    path: ':id/edit',\r\n    component: QuestionnaireUpdateComponent,\r\n    resolve: {\r\n      questionnaire: QuestionnaireRoutingResolveService,\r\n    },\r\n    canActivate: [UserRouteAccessService],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(questionnaireRoute)],\r\n  exports: [RouterModule],\r\n})\r\nexport class QuestionnaireRoutingModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\n\r\nimport dayjs from 'dayjs/esm';\r\nimport { DATE_TIME_FORMAT } from 'app/config/input.constants';\r\nimport { IQuestionnaire, NewQuestionnaire } from '../questionnaire.model';\r\n\r\n/**\r\n * A partial Type with required key is used as form input.\r\n */\r\ntype PartialWithRequiredKeyOf<T extends { id: unknown }> = Partial<Omit<T, 'id'>> & { id: T['id'] };\r\n\r\n/**\r\n * Type for createFormGroup and resetForm argument.\r\n * It accepts IQuestionnaire for edit and NewQuestionnaireFormGroupInput for create.\r\n */\r\ntype QuestionnaireFormGroupInput = IQuestionnaire | PartialWithRequiredKeyOf<NewQuestionnaire>;\r\n\r\n/**\r\n * Type that converts some properties for forms.\r\n */\r\ntype FormValueOf<T extends IQuestionnaire | NewQuestionnaire> = Omit<T, 'date'> & {\r\n  date?: string | null;\r\n};\r\n\r\ntype QuestionnaireFormRawValue = FormValueOf<IQuestionnaire>;\r\n\r\ntype NewQuestionnaireFormRawValue = FormValueOf<NewQuestionnaire>;\r\n\r\ntype QuestionnaireFormDefaults = Pick<NewQuestionnaire, 'id' | 'date'>;\r\n\r\ntype QuestionnaireFormGroupContent = {\r\n  id: FormControl<QuestionnaireFormRawValue['id'] | NewQuestionnaire['id']>;\r\n  date: FormControl<QuestionnaireFormRawValue['date']>;\r\n  userName: FormControl<QuestionnaireFormRawValue['userName']>;\r\n  questionnaire: FormControl<QuestionnaireFormRawValue['questionnaire']>;\r\n};\r\n\r\nexport type QuestionnaireFormGroup = FormGroup<QuestionnaireFormGroupContent>;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class QuestionnaireFormService {\r\n  createQuestionnaireFormGroup(questionnaire: QuestionnaireFormGroupInput = { id: null }): QuestionnaireFormGroup {\r\n    const questionnaireRawValue = this.convertQuestionnaireToQuestionnaireRawValue({\r\n      ...this.getFormDefaults(),\r\n      ...questionnaire,\r\n    });\r\n    return new FormGroup<QuestionnaireFormGroupContent>({\r\n      id: new FormControl(\r\n        { value: questionnaireRawValue.id, disabled: true },\r\n        {\r\n          nonNullable: true,\r\n          validators: [Validators.required],\r\n        }\r\n      ),\r\n      date: new FormControl(questionnaireRawValue.date, {\r\n        validators: [Validators.required],\r\n      }),\r\n      userName: new FormControl(questionnaireRawValue.userName, {\r\n        validators: [Validators.required],\r\n      }),\r\n      questionnaire: new FormControl(questionnaireRawValue.questionnaire),\r\n    });\r\n  }\r\n\r\n  getQuestionnaire(form: QuestionnaireFormGroup): IQuestionnaire | NewQuestionnaire {\r\n    return this.convertQuestionnaireRawValueToQuestionnaire(form.getRawValue() as QuestionnaireFormRawValue | NewQuestionnaireFormRawValue);\r\n  }\r\n\r\n  resetForm(form: QuestionnaireFormGroup, questionnaire: QuestionnaireFormGroupInput): void {\r\n    const questionnaireRawValue = this.convertQuestionnaireToQuestionnaireRawValue({ ...this.getFormDefaults(), ...questionnaire });\r\n    form.reset(\r\n      {\r\n        ...questionnaireRawValue,\r\n        id: { value: questionnaireRawValue.id, disabled: true },\r\n      } as any /* cast to workaround https://github.com/angular/angular/issues/46458 */\r\n    );\r\n  }\r\n\r\n  private getFormDefaults(): QuestionnaireFormDefaults {\r\n    const currentTime = dayjs();\r\n\r\n    return {\r\n      id: null,\r\n      date: currentTime,\r\n    };\r\n  }\r\n\r\n  private convertQuestionnaireRawValueToQuestionnaire(\r\n    rawQuestionnaire: QuestionnaireFormRawValue | NewQuestionnaireFormRawValue\r\n  ): IQuestionnaire | NewQuestionnaire {\r\n    return {\r\n      ...rawQuestionnaire,\r\n      date: dayjs(rawQuestionnaire.date, DATE_TIME_FORMAT),\r\n    };\r\n  }\r\n\r\n  private convertQuestionnaireToQuestionnaireRawValue(\r\n    questionnaire: IQuestionnaire | (Partial<NewQuestionnaire> & QuestionnaireFormDefaults)\r\n  ): QuestionnaireFormRawValue | PartialWithRequiredKeyOf<NewQuestionnaireFormRawValue> {\r\n    return {\r\n      ...questionnaire,\r\n      date: questionnaire.date ? questionnaire.date.format(DATE_TIME_FORMAT) : undefined,\r\n    };\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize, map } from 'rxjs/operators';\r\n\r\nimport { QuestionnaireFormService, QuestionnaireFormGroup } from './questionnaire-form.service';\r\nimport { IQuestionnaire } from '../questionnaire.model';\r\nimport { QuestionnaireService } from '../service/questionnaire.service';\r\nimport { IIntro } from 'app/entities/intro/intro.model';\r\nimport { IntroService } from 'app/entities/intro/service/intro.service';\r\n\r\n@Component({\r\n  selector: 'jhi-questionnaire-update',\r\n  templateUrl: './questionnaire-update.component.html',\r\n})\r\nexport class QuestionnaireUpdateComponent implements OnInit {\r\n  isSaving = false;\r\n  questionnaire: IQuestionnaire | null = null;\r\n\r\n  introsSharedCollection: IIntro[] = [];\r\n\r\n  editForm: QuestionnaireFormGroup = this.questionnaireFormService.createQuestionnaireFormGroup();\r\n\r\n  constructor(\r\n    protected questionnaireService: QuestionnaireService,\r\n    protected questionnaireFormService: QuestionnaireFormService,\r\n    protected introService: IntroService,\r\n    protected activatedRoute: ActivatedRoute\r\n  ) {}\r\n\r\n  compareIntro = (o1: IIntro | null, o2: IIntro | null): boolean => this.introService.compareIntro(o1, o2);\r\n\r\n  ngOnInit(): void {\r\n    this.activatedRoute.data.subscribe(({ questionnaire }) => {\r\n      this.questionnaire = questionnaire;\r\n      if (questionnaire) {\r\n        this.updateForm(questionnaire);\r\n      }\r\n\r\n      this.loadRelationshipsOptions();\r\n    });\r\n  }\r\n\r\n  previousState(): void {\r\n    window.history.back();\r\n  }\r\n\r\n  save(): void {\r\n    this.isSaving = true;\r\n    const questionnaire = this.questionnaireFormService.getQuestionnaire(this.editForm);\r\n    if (questionnaire.id !== null) {\r\n      this.subscribeToSaveResponse(this.questionnaireService.update(questionnaire));\r\n    } else {\r\n      this.subscribeToSaveResponse(this.questionnaireService.create(questionnaire));\r\n    }\r\n  }\r\n\r\n  protected subscribeToSaveResponse(result: Observable<HttpResponse<IQuestionnaire>>): void {\r\n    result.pipe(finalize(() => this.onSaveFinalize())).subscribe({\r\n      next: () => this.onSaveSuccess(),\r\n      error: () => this.onSaveError(),\r\n    });\r\n  }\r\n\r\n  protected onSaveSuccess(): void {\r\n    this.previousState();\r\n  }\r\n\r\n  protected onSaveError(): void {\r\n    // Api for inheritance.\r\n  }\r\n\r\n  protected onSaveFinalize(): void {\r\n    this.isSaving = false;\r\n  }\r\n\r\n  protected updateForm(questionnaire: IQuestionnaire): void {\r\n    this.questionnaire = questionnaire;\r\n    this.questionnaireFormService.resetForm(this.editForm, questionnaire);\r\n\r\n    this.introsSharedCollection = this.introService.addIntroToCollectionIfMissing<IIntro>(\r\n      this.introsSharedCollection,\r\n      questionnaire.questionnaire\r\n    );\r\n  }\r\n\r\n  protected loadRelationshipsOptions(): void {\r\n    this.introService\r\n      .query()\r\n      .pipe(map((res: HttpResponse<IIntro[]>) => res.body ?? []))\r\n      .pipe(map((intros: IIntro[]) => this.introService.addIntroToCollectionIfMissing<IIntro>(intros, this.questionnaire?.questionnaire)))\r\n      .subscribe((intros: IIntro[]) => (this.introsSharedCollection = intros));\r\n  }\r\n}\r\n","<div class=\"d-flex justify-content-center\">\r\n  <div class=\"col-8\">\r\n    <form name=\"editForm\" role=\"form\" novalidate (ngSubmit)=\"save()\" [formGroup]=\"editForm\">\r\n      <h2 id=\"jhi-questionnaire-heading\" data-cy=\"QuestionnaireCreateUpdateHeading\">Create or edit a Questionnaire</h2>\r\n\r\n      <div>\r\n        <jhi-alert-error></jhi-alert-error>\r\n\r\n        <div class=\"row mb-3\" *ngIf=\"editForm.controls.id.value !== null\">\r\n          <label class=\"form-label\" for=\"field_id\">ID</label>\r\n          <input type=\"number\" class=\"form-control\" name=\"id\" id=\"field_id\" data-cy=\"id\" formControlName=\"id\" [readonly]=\"true\" />\r\n        </div>\r\n\r\n        <div class=\"row mb-3\">\r\n          <label class=\"form-label\" for=\"field_date\">Date</label>\r\n          <div class=\"d-flex\">\r\n            <input\r\n              id=\"field_date\"\r\n              data-cy=\"date\"\r\n              type=\"datetime-local\"\r\n              class=\"form-control\"\r\n              name=\"date\"\r\n              formControlName=\"date\"\r\n              placeholder=\"YYYY-MM-DD HH:mm\"\r\n            />\r\n          </div>\r\n          <div *ngIf=\"editForm.get('date')!.invalid && (editForm.get('date')!.dirty || editForm.get('date')!.touched)\">\r\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('date')?.errors?.required\"> This field is required. </small>\r\n            <small class=\"form-text text-danger\" [hidden]=\"!editForm.get('date')?.errors?.datetimelocal\">\r\n              This field should be a date and time.\r\n            </small>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row mb-3\">\r\n          <label class=\"form-label\" for=\"field_userName\">User Name</label>\r\n          <input type=\"text\" class=\"form-control\" name=\"userName\" id=\"field_userName\" data-cy=\"userName\" formControlName=\"userName\" />\r\n          <div *ngIf=\"editForm.get('userName')!.invalid && (editForm.get('userName')!.dirty || editForm.get('userName')!.touched)\">\r\n            <small class=\"form-text text-danger\" *ngIf=\"editForm.get('userName')?.errors?.required\"> This field is required. </small>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"row mb-3\">\r\n          <label class=\"form-label\" for=\"field_questionnaire\">Questionnaire</label>\r\n          <select\r\n            class=\"form-control\"\r\n            id=\"field_questionnaire\"\r\n            data-cy=\"questionnaire\"\r\n            name=\"questionnaire\"\r\n            formControlName=\"questionnaire\"\r\n            [compareWith]=\"compareIntro\"\r\n          >\r\n            <option [ngValue]=\"null\"></option>\r\n            <option [ngValue]=\"introOption\" *ngFor=\"let introOption of introsSharedCollection\">{{ introOption.id }}</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <button type=\"button\" id=\"cancel-save\" data-cy=\"entityCreateCancelButton\" class=\"btn btn-secondary\" (click)=\"previousState()\">\r\n          <fa-icon icon=\"ban\"></fa-icon>&nbsp;<span>Cancel</span>\r\n        </button>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          id=\"save-entity\"\r\n          data-cy=\"entityCreateSaveButton\"\r\n          [disabled]=\"editForm.invalid || isSaving\"\r\n          class=\"btn btn-primary\"\r\n        >\r\n          <fa-icon icon=\"save\"></fa-icon>&nbsp;<span>Save</span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}